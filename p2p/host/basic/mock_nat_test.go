// Code generated by MockGen. DO NOT EDIT.
// Source: natmgr.go

// Package basichost is a generated GoMock package.
package basichost

import (
	netip "net/netip"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNat is a mock of Nat interface.
type MockNat struct {
	ctrl     *gomock.Controller
	recorder *MockNatMockRecorder
}

// MockNatMockRecorder is the mock recorder for MockNat.
type MockNatMockRecorder struct {
	mock *MockNat
}

// NewMockNat creates a new mock instance.
func NewMockNat(ctrl *gomock.Controller) *MockNat {
	mock := &MockNat{ctrl: ctrl}
	mock.recorder = &MockNatMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNat) EXPECT() *MockNatMockRecorder {
	return m.recorder
}

// AddMapping mocks base method.
func (m *MockNat) AddMapping(protocol string, port int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMapping", protocol, port)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMapping indicates an expected call of AddMapping.
func (mr *MockNatMockRecorder) AddMapping(protocol, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMapping", reflect.TypeOf((*MockNat)(nil).AddMapping), protocol, port)
}

// Close mocks base method.
func (m *MockNat) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockNatMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNat)(nil).Close))
}

// GetMapping mocks base method.
func (m *MockNat) GetMapping(protocol string, port int) (netip.AddrPort, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapping", protocol, port)
	ret0, _ := ret[0].(netip.AddrPort)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetMapping indicates an expected call of GetMapping.
func (mr *MockNatMockRecorder) GetMapping(protocol, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapping", reflect.TypeOf((*MockNat)(nil).GetMapping), protocol, port)
}

// RemoveMapping mocks base method.
func (m *MockNat) RemoveMapping(protocol string, port int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMapping", protocol, port)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMapping indicates an expected call of RemoveMapping.
func (mr *MockNatMockRecorder) RemoveMapping(protocol, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMapping", reflect.TypeOf((*MockNat)(nil).RemoveMapping), protocol, port)
}
